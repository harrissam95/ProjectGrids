//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/Hex Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HexControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HexControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Hex Controls"",
    ""maps"": [
        {
            ""name"": ""AllControls"",
            ""id"": ""ebc4b7fd-c22c-40f1-89df-ad672bdd5e97"",
            ""actions"": [
                {
                    ""name"": ""MiddleMouse"",
                    ""type"": ""Button"",
                    ""id"": ""914af376-f465-48d0-af55-9bd758a75fc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftShift"",
                    ""type"": ""Button"",
                    ""id"": ""310bbcc9-ce59-4e2a-af8e-4443a0d6e1b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftCtrl"",
                    ""type"": ""Button"",
                    ""id"": ""50f855b0-40e9-4028-a331-a50afac821d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96991af9-742c-46d9-9208-c92cde682576"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73c9dd53-a003-4fe7-ab3b-fc0f07a4c136"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftCtrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1a435fd-8735-441a-902c-d4ef2df7b760"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AllControls
        m_AllControls = asset.FindActionMap("AllControls", throwIfNotFound: true);
        m_AllControls_MiddleMouse = m_AllControls.FindAction("MiddleMouse", throwIfNotFound: true);
        m_AllControls_LeftShift = m_AllControls.FindAction("LeftShift", throwIfNotFound: true);
        m_AllControls_LeftCtrl = m_AllControls.FindAction("LeftCtrl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AllControls
    private readonly InputActionMap m_AllControls;
    private IAllControlsActions m_AllControlsActionsCallbackInterface;
    private readonly InputAction m_AllControls_MiddleMouse;
    private readonly InputAction m_AllControls_LeftShift;
    private readonly InputAction m_AllControls_LeftCtrl;
    public struct AllControlsActions
    {
        private @HexControls m_Wrapper;
        public AllControlsActions(@HexControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MiddleMouse => m_Wrapper.m_AllControls_MiddleMouse;
        public InputAction @LeftShift => m_Wrapper.m_AllControls_LeftShift;
        public InputAction @LeftCtrl => m_Wrapper.m_AllControls_LeftCtrl;
        public InputActionMap Get() { return m_Wrapper.m_AllControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AllControlsActions set) { return set.Get(); }
        public void SetCallbacks(IAllControlsActions instance)
        {
            if (m_Wrapper.m_AllControlsActionsCallbackInterface != null)
            {
                @MiddleMouse.started -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnMiddleMouse;
                @MiddleMouse.performed -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnMiddleMouse;
                @MiddleMouse.canceled -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnMiddleMouse;
                @LeftShift.started -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnLeftShift;
                @LeftShift.performed -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnLeftShift;
                @LeftShift.canceled -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnLeftShift;
                @LeftCtrl.started -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnLeftCtrl;
                @LeftCtrl.performed -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnLeftCtrl;
                @LeftCtrl.canceled -= m_Wrapper.m_AllControlsActionsCallbackInterface.OnLeftCtrl;
            }
            m_Wrapper.m_AllControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MiddleMouse.started += instance.OnMiddleMouse;
                @MiddleMouse.performed += instance.OnMiddleMouse;
                @MiddleMouse.canceled += instance.OnMiddleMouse;
                @LeftShift.started += instance.OnLeftShift;
                @LeftShift.performed += instance.OnLeftShift;
                @LeftShift.canceled += instance.OnLeftShift;
                @LeftCtrl.started += instance.OnLeftCtrl;
                @LeftCtrl.performed += instance.OnLeftCtrl;
                @LeftCtrl.canceled += instance.OnLeftCtrl;
            }
        }
    }
    public AllControlsActions @AllControls => new AllControlsActions(this);
    public interface IAllControlsActions
    {
        void OnMiddleMouse(InputAction.CallbackContext context);
        void OnLeftShift(InputAction.CallbackContext context);
        void OnLeftCtrl(InputAction.CallbackContext context);
    }
}
